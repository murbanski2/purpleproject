<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:sec="http://www.springframework.org/schema/security"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
          http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.2.xsd
          http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
          http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
          http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
">
    
    <!-- use this to set a properties file location and provide access
    to key=value pairs via Spring EL expressions (see dataSource below).
    There are two reasons for doing this: 1) certain details can be configured
    outside of the application .war, such as port numbers; and 2) sensitive 
    information, such as a password, can be hidden from the developer of the app -->
    <context:property-placeholder location="file:/auction/bitbay.properties"/>
    
    <!-- Scans within the base package of the application for @Components to configure as beans -->
    <context:component-scan base-package="edu.wctc.distjava.purpleproject">
        <context:exclude-filter type="regex" expression="edu\.wctc\.distjava\.purpleproject\.repository.*" />
        <context:exclude-filter type="regex" expression="edu\.wctc\.distjava\.purpleproject\.util.*" />
    </context:component-scan>
    <context:annotation-config/>
    
    <jpa:repositories base-package="edu.wctc.distjava.purpleproject.repository" />

    <!-- begin Spring Security config -->
    
    <!-- Allows method level permissions, e.g.,
         @Secured("ROLE_ADMIN")
    -->
    <sec:global-method-security secured-annotations="enabled" />

    <!-- Don't SSL encrypt static resources -->
    <sec:http pattern="/resources/**" security="none"/>
    <sec:http pattern="/primepush/**" security="none"/>

    <sec:http auto-config="true" access-denied-page="/faces/accessDenied.xhtml">
            
        <!-- On Glassfish, dev ports are 8080 and 8181, whereas on
        production its 80 and 443 -->
        <sec:port-mappings>
            <sec:port-mapping http="${http.port}" https="${https.port}"/>
        </sec:port-mappings>

        <sec:intercept-url 
            pattern="/faces/admin/**" 
            access="ROLE_ADMIN" requires-channel="https" />
        <sec:intercept-url 
            pattern="/faces/member/**" 
            access="ROLE_MEMBER, ROLE_ADMIN" requires-channel="https" />
        <sec:intercept-url 
            pattern="/**" 
            access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        
        <!-- Use O/S provided login window
        <http-basic />
        -->
        <!-- Use custom form for login -->
        <sec:form-login 
            login-processing-url="/j_spring_security_check"
            login-page="/faces/login.xhtml" 
            authentication-success-handler-ref="myAuthenticationHandler"
            authentication-failure-url="/faces/accessDenied.xhtml"/>
            
        <sec:logout logout-url="/j_spring_security_logout" 
                    invalidate-session="true" 
                    logout-success-url="/faces/index.xhtml" />

    </sec:http>
 
    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider>
            <sec:password-encoder ref="encoderBean">
                <sec:salt-source user-property="username"/>
            </sec:password-encoder>
            <sec:jdbc-user-service data-source-ref="dataSource" /> 
            
            <!-- if not using a database for accounts, hard-code them here
           <sec:user-service>
               <sec:user name="admin" password="admin" authorities="ROLE_ADMIN, ROLE_MEMBER" />
               <sec:user name="member" password="member" authorities="ROLE_MEMBER" />
           </sec:user-service>
            -->
        </sec:authentication-provider>
    </sec:authentication-manager>
    
    <bean id="myAuthenticationHandler" class="edu.wctc.distjava.purpleproject.util.MyAuthenticationHandler" />
    
    <bean id="encoderBean" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
        <constructor-arg value="512" />
        <property name="iterations" value="1024"/>
    </bean>
    
    
    <!-- Server managed connection pool accessed via JNDI -->
    <jee:jndi-lookup id="dataSource" jndi-name="${jndi.db.resource.name}"/>
    
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="purpleproject_PU"/>
        <property name="packagesToScan" value="edu.wctc.distjava.purpleproject.domain"/>
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="false" />
                <property name="generateDdl" value="false" />
                <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect"/>
            </bean>
        </property>
    </bean>
	
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" />   
    <aop:config>
        <aop:pointcut id="allServiceMethods" expression="execution(* edu.wctc.distjava.purpleproject.service.*.*(..))"/>
        <aop:advisor pointcut-ref="allServiceMethods" advice-ref="perfLogInterceptor" order="2"/>
    </aop:config> 
    
    <bean name="perfLogInterceptor" class="edu.wctc.distjava.purpleproject.util.PerformanceLoggingInterceptor"/>
        
    <!-- (Optional) Automatically receives and logs AuthenticationEvent messages -->
    <bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com"/>
        <property name="username" value="${mail.username}"/>
        <property name="password" value="${mail.password}"/>
        <property name="port" value="587"/>
        <property name="javaMailProperties">
            <props>
                <!-- Use SMTP transport protocol -->
                <prop key="mail.transport.protocol">smtp</prop>
                <!-- Use SMTP-AUTH to authenticate to SMTP server -->
                <prop key="mail.smtp.auth">true</prop>
                <!-- Use TLS to encrypt communication with SMTP server -->
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>

    <!-- this is a template message that we can pre-load with default state -->
    <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
        <!-- if using Gmail, the from must be the address of the account holder -->
        <property name="from" value="${mail.username}"/>
        <property name="subject" value="Bit Bay Registration - One More Step Required"/>
    </bean>
    
    <!-- Add support for Spring-managed, JSF ViewScope, which is not built
    in to Spring. See the custom scope class in the "util" package -->
    <bean
        class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="view">
                    <bean class="edu.wctc.distjava.purpleproject.util.ViewScope" />
                </entry>
            </map>
        </property>
    </bean>
</beans>